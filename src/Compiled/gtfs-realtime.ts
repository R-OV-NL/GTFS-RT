/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.0
 * source: gtfs-realtime.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace transit_realtime {
    export class FeedMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header: FeedHeader;
            entity: FeedEntity[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.header = data.header;
                this.entity = data.entity;
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, FeedHeader, 1) as FeedHeader;
        }
        set header(value: FeedHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1);
        }
        get entity() {
            return pb_1.Message.getRepeatedWrapperField(this, FeedEntity, 2) as FeedEntity[];
        }
        set entity(value: FeedEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof FeedHeader.prototype.toObject>;
            entity?: ReturnType<typeof FeedEntity.prototype.toObject>[];
        }): FeedMessage {
            const message = new FeedMessage({
                header: FeedHeader.fromObject(data.header),
                entity: data.entity.map(item => FeedEntity.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof FeedHeader.prototype.toObject>;
                entity?: ReturnType<typeof FeedEntity.prototype.toObject>[];
            } = {};
            if (this.header) {
                data.header = this.header.toObject();
            }
            if (this.entity) {
                data.entity = this.entity.map((item: FeedEntity) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.entity.length)
                writer.writeRepeatedMessage(2, this.entity, (item: FeedEntity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeedMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeedMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = FeedHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.entity, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FeedEntity.deserialize(reader), FeedEntity));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeedMessage {
            return FeedMessage.deserialize(bytes);
        }
    }
    export class FeedHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gtfs_realtime_version: string;
            incrementality?: FeedHeader.Incrementality;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.gtfs_realtime_version = data.gtfs_realtime_version;
                if ("incrementality" in data && data.incrementality) {
                    this.incrementality = data.incrementality;
                }
                if ("timestamp" in data && data.timestamp) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get gtfs_realtime_version() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set gtfs_realtime_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_gtfs_realtime_version() {
            return pb_1.Message.getField(this, 1);
        }
        get incrementality() {
            return pb_1.Message.getFieldWithDefault(this, 2, FeedHeader.Incrementality.FULL_DATASET) as FeedHeader.Incrementality;
        }
        set incrementality(value: FeedHeader.Incrementality) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_incrementality() {
            return pb_1.Message.getField(this, 2);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 3);
        }
        static fromObject(data: {
            gtfs_realtime_version?: string;
            incrementality?: FeedHeader.Incrementality;
            timestamp?: number;
        }): FeedHeader {
            const message = new FeedHeader({
                gtfs_realtime_version: data.gtfs_realtime_version
            });
            if (data.incrementality) {
                message.incrementality = data.incrementality;
            }
            if (data.timestamp) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                gtfs_realtime_version?: string;
                incrementality?: FeedHeader.Incrementality;
                timestamp?: number;
            } = {};
            if (this.gtfs_realtime_version) {
                data.gtfs_realtime_version = this.gtfs_realtime_version;
            }
            if (this.incrementality) {
                data.incrementality = this.incrementality;
            }
            if (this.timestamp) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_gtfs_realtime_version && this.gtfs_realtime_version.length)
                writer.writeString(1, this.gtfs_realtime_version);
            if (this.has_incrementality)
                writer.writeEnum(2, this.incrementality);
            if (this.has_timestamp)
                writer.writeUint64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeedHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeedHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gtfs_realtime_version = reader.readString();
                        break;
                    case 2:
                        message.incrementality = reader.readEnum();
                        break;
                    case 3:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeedHeader {
            return FeedHeader.deserialize(bytes);
        }
    }
    export namespace FeedHeader {
        export enum Incrementality {
            FULL_DATASET = 0,
            DIFFERENTIAL = 1
        }
    }
    export class FeedEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id: string;
            is_deleted?: boolean;
            trip_update?: TripUpdate;
            vehicle?: VehiclePosition;
            alert?: Alert;
            shape?: Shape;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.id = data.id;
                if ("is_deleted" in data && data.is_deleted) {
                    this.is_deleted = data.is_deleted;
                }
                if ("trip_update" in data && data.trip_update) {
                    this.trip_update = data.trip_update;
                }
                if ("vehicle" in data && data.vehicle) {
                    this.vehicle = data.vehicle;
                }
                if ("alert" in data && data.alert) {
                    this.alert = data.alert;
                }
                if ("shape" in data && data.shape) {
                    this.shape = data.shape;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1);
        }
        get is_deleted() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_deleted(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_is_deleted() {
            return pb_1.Message.getField(this, 2);
        }
        get trip_update() {
            return pb_1.Message.getWrapperField(this, TripUpdate, 3) as TripUpdate;
        }
        set trip_update(value: TripUpdate) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_trip_update() {
            return pb_1.Message.getField(this, 3);
        }
        get vehicle() {
            return pb_1.Message.getWrapperField(this, VehiclePosition, 4) as VehiclePosition;
        }
        set vehicle(value: VehiclePosition) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_vehicle() {
            return pb_1.Message.getField(this, 4);
        }
        get alert() {
            return pb_1.Message.getWrapperField(this, Alert, 5) as Alert;
        }
        set alert(value: Alert) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_alert() {
            return pb_1.Message.getField(this, 5);
        }
        get shape() {
            return pb_1.Message.getWrapperField(this, Shape, 6) as Shape;
        }
        set shape(value: Shape) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_shape() {
            return pb_1.Message.getField(this, 6);
        }
        static fromObject(data: {
            id?: string;
            is_deleted?: boolean;
            trip_update?: ReturnType<typeof TripUpdate.prototype.toObject>;
            vehicle?: ReturnType<typeof VehiclePosition.prototype.toObject>;
            alert?: ReturnType<typeof Alert.prototype.toObject>;
            shape?: ReturnType<typeof Shape.prototype.toObject>;
        }): FeedEntity {
            const message = new FeedEntity({
                id: data.id
            });
            if (data.is_deleted) {
                message.is_deleted = data.is_deleted;
            }
            if (data.trip_update) {
                message.trip_update = TripUpdate.fromObject(data.trip_update);
            }
            if (data.vehicle) {
                message.vehicle = VehiclePosition.fromObject(data.vehicle);
            }
            if (data.alert) {
                message.alert = Alert.fromObject(data.alert);
            }
            if (data.shape) {
                message.shape = Shape.fromObject(data.shape);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                is_deleted?: boolean;
                trip_update?: ReturnType<typeof TripUpdate.prototype.toObject>;
                vehicle?: ReturnType<typeof VehiclePosition.prototype.toObject>;
                alert?: ReturnType<typeof Alert.prototype.toObject>;
                shape?: ReturnType<typeof Shape.prototype.toObject>;
            } = {};
            if (this.id) {
                data.id = this.id;
            }
            if (this.is_deleted) {
                data.is_deleted = this.is_deleted;
            }
            if (this.trip_update) {
                data.trip_update = this.trip_update.toObject();
            }
            if (this.vehicle) {
                data.vehicle = this.vehicle.toObject();
            }
            if (this.alert) {
                data.alert = this.alert.toObject();
            }
            if (this.shape) {
                data.shape = this.shape.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id && this.id.length)
                writer.writeString(1, this.id);
            if (this.has_is_deleted)
                writer.writeBool(2, this.is_deleted);
            if (this.has_trip_update)
                writer.writeMessage(3, this.trip_update, () => this.trip_update.serialize(writer));
            if (this.has_vehicle)
                writer.writeMessage(4, this.vehicle, () => this.vehicle.serialize(writer));
            if (this.has_alert)
                writer.writeMessage(5, this.alert, () => this.alert.serialize(writer));
            if (this.has_shape)
                writer.writeMessage(6, this.shape, () => this.shape.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeedEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeedEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.is_deleted = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.trip_update, () => message.trip_update = TripUpdate.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.vehicle, () => message.vehicle = VehiclePosition.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.alert, () => message.alert = Alert.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.shape, () => message.shape = Shape.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeedEntity {
            return FeedEntity.deserialize(bytes);
        }
    }
    export class TripUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            trip: TripDescriptor;
            vehicle?: VehicleDescriptor;
            stop_time_update: TripUpdate.StopTimeUpdate[];
            timestamp?: number;
            delay?: number;
            trip_properties?: TripUpdate.TripProperties;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.trip = data.trip;
                if ("vehicle" in data && data.vehicle) {
                    this.vehicle = data.vehicle;
                }
                this.stop_time_update = data.stop_time_update;
                if ("timestamp" in data && data.timestamp) {
                    this.timestamp = data.timestamp;
                }
                if ("delay" in data && (data.delay || data.delay === 0)) {
                    this.delay = data.delay;
                }
                if ("trip_properties" in data && data.trip_properties) {
                    this.trip_properties = data.trip_properties;
                }
            }
        }
        get trip() {
            return pb_1.Message.getWrapperField(this, TripDescriptor, 1) as TripDescriptor;
        }
        set trip(value: TripDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_trip() {
            return pb_1.Message.getField(this, 1);
        }
        get vehicle() {
            return pb_1.Message.getWrapperField(this, VehicleDescriptor, 3) as VehicleDescriptor;
        }
        set vehicle(value: VehicleDescriptor) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_vehicle() {
            return pb_1.Message.getField(this, 3);
        }
        get stop_time_update() {
            return pb_1.Message.getRepeatedWrapperField(this, TripUpdate.StopTimeUpdate, 2) as TripUpdate.StopTimeUpdate[];
        }
        set stop_time_update(value: TripUpdate.StopTimeUpdate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 4);
        }
        get delay() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set delay(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_delay() {
            return pb_1.Message.getField(this, 5);
        }
        get trip_properties() {
            return pb_1.Message.getWrapperField(this, TripUpdate.TripProperties, 6) as TripUpdate.TripProperties;
        }
        set trip_properties(value: TripUpdate.TripProperties) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_trip_properties() {
            return pb_1.Message.getField(this, 6);
        }
        static fromObject(data: {
            trip?: ReturnType<typeof TripDescriptor.prototype.toObject>;
            vehicle?: ReturnType<typeof VehicleDescriptor.prototype.toObject>;
            stop_time_update?: ReturnType<typeof TripUpdate.StopTimeUpdate.prototype.toObject>[];
            timestamp?: number;
            delay?: number;
            trip_properties?: ReturnType<typeof TripUpdate.TripProperties.prototype.toObject>;
        }): TripUpdate {
            const message = new TripUpdate({
                trip: TripDescriptor.fromObject(data.trip),
                stop_time_update: data.stop_time_update.map(item => TripUpdate.StopTimeUpdate.fromObject(item))
            });
            if (data.vehicle) {
                message.vehicle = VehicleDescriptor.fromObject(data.vehicle);
            }
            if (data.timestamp) {
                message.timestamp = data.timestamp;
            }
            if (data.delay) {
                message.delay = data.delay;
            }
            if (data.trip_properties) {
                message.trip_properties = TripUpdate.TripProperties.fromObject(data.trip_properties);
            }
            return message;
        }
        toObject() {
            const data: {
                trip?: ReturnType<typeof TripDescriptor.prototype.toObject>;
                vehicle?: ReturnType<typeof VehicleDescriptor.prototype.toObject>;
                stop_time_update?: ReturnType<typeof TripUpdate.StopTimeUpdate.prototype.toObject>[];
                timestamp?: number;
                delay?: number;
                trip_properties?: ReturnType<typeof TripUpdate.TripProperties.prototype.toObject>;
            } = {};
            if (this.trip) {
                data.trip = this.trip.toObject();
            }
            if (this.vehicle) {
                data.vehicle = this.vehicle.toObject();
            }
            if (this.stop_time_update) {
                data.stop_time_update = this.stop_time_update.map((item: TripUpdate.StopTimeUpdate) => item.toObject());
            }
            if (this.timestamp) {
                data.timestamp = this.timestamp;
            }
            if ((this.delay || this.delay === 0)) {
                data.delay = this.delay;
            }
            if (this.trip_properties) {
                data.trip_properties = this.trip_properties.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_trip)
                writer.writeMessage(1, this.trip, () => this.trip.serialize(writer));
            if (this.has_vehicle)
                writer.writeMessage(3, this.vehicle, () => this.vehicle.serialize(writer));
            if (this.stop_time_update.length)
                writer.writeRepeatedMessage(2, this.stop_time_update, (item: TripUpdate.StopTimeUpdate) => item.serialize(writer));
            if (this.has_timestamp)
                writer.writeUint64(4, this.timestamp);
            if (this.has_delay)
                writer.writeInt32(5, this.delay);
            if (this.has_trip_properties)
                writer.writeMessage(6, this.trip_properties, () => this.trip_properties.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TripUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TripUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.trip, () => message.trip = TripDescriptor.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.vehicle, () => message.vehicle = VehicleDescriptor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.stop_time_update, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TripUpdate.StopTimeUpdate.deserialize(reader), TripUpdate.StopTimeUpdate));
                        break;
                    case 4:
                        message.timestamp = reader.readUint64();
                        break;
                    case 5:
                        message.delay = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.trip_properties, () => message.trip_properties = TripUpdate.TripProperties.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TripUpdate {
            return TripUpdate.deserialize(bytes);
        }
    }
    export namespace TripUpdate {
        export class StopTimeEvent extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                delay?: number;
                time?: number;
                uncertainty?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("delay" in data && (data.delay || data.delay === 0)) {
                        this.delay = data.delay;
                    }
                    if ("time" in data && data.time) {
                        this.time = data.time;
                    }
                    if ("uncertainty" in data && data.uncertainty) {
                        this.uncertainty = data.uncertainty;
                    }
                }
            }
            get delay() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set delay(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_delay() {
                return pb_1.Message.getField(this, 1);
            }
            get time() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set time(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_time() {
                return pb_1.Message.getField(this, 2);
            }
            get uncertainty() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set uncertainty(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_uncertainty() {
                return pb_1.Message.getField(this, 3);
            }
            static fromObject(data: {
                delay?: number;
                time?: number;
                uncertainty?: number;
            }): StopTimeEvent {
                const message = new StopTimeEvent({});
                if ((data.delay || data.delay === 0)) {
                    message.delay = data.delay;
                }
                if (data.time) {
                    message.time = data.time;
                }
                if (data.uncertainty) {
                    message.uncertainty = data.uncertainty;
                }
                return message;
            }
            toObject() {
                const data: {
                    delay?: number;
                    time?: number;
                    uncertainty?: number;
                } = {};
                if ((this.delay || this.delay === 0)) {
                    data.delay = this.delay;
                }
                if (this.time) {
                    data.time = this.time;
                }
                if (this.uncertainty) {
                    data.uncertainty = this.uncertainty;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_delay)
                    writer.writeInt32(1, this.delay);
                if (this.has_time)
                    writer.writeInt64(2, this.time);
                if (this.has_uncertainty)
                    writer.writeInt32(3, this.uncertainty);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopTimeEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopTimeEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.delay = reader.readInt32();
                            break;
                        case 2:
                            message.time = reader.readInt64();
                            break;
                        case 3:
                            message.uncertainty = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StopTimeEvent {
                return StopTimeEvent.deserialize(bytes);
            }
        }
        export class StopTimeUpdate extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                stop_sequence?: number;
                stop_id?: string;
                arrival?: TripUpdate.StopTimeEvent;
                departure?: TripUpdate.StopTimeEvent;
                departure_occupancy_status?: VehiclePosition.OccupancyStatus;
                schedule_relationship?: TripUpdate.StopTimeUpdate.ScheduleRelationship;
                stop_time_properties?: TripUpdate.StopTimeUpdate.StopTimeProperties;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("stop_sequence" in data && data.stop_sequence) {
                        this.stop_sequence = data.stop_sequence;
                    }
                    if ("stop_id" in data && data.stop_id) {
                        this.stop_id = data.stop_id;
                    }
                    if ("arrival" in data && data.arrival) {
                        this.arrival = data.arrival;
                    }
                    if ("departure" in data && data.departure) {
                        this.departure = data.departure;
                    }
                    if ("departure_occupancy_status" in data && data.departure_occupancy_status) {
                        this.departure_occupancy_status = data.departure_occupancy_status;
                    }
                    if ("schedule_relationship" in data && (data.schedule_relationship || data.schedule_relationship == 0)) {
                        this.schedule_relationship = data.schedule_relationship;
                    }
                    if ("stop_time_properties" in data && data.stop_time_properties) {
                        this.stop_time_properties = data.stop_time_properties;
                    }
                }
            }
            get stop_sequence() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set stop_sequence(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_stop_sequence() {
                return pb_1.Message.getField(this, 1);
            }
            get stop_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set stop_id(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_stop_id() {
                return pb_1.Message.getField(this, 4);
            }
            get arrival() {
                return pb_1.Message.getWrapperField(this, TripUpdate.StopTimeEvent, 2) as TripUpdate.StopTimeEvent;
            }
            set arrival(value: TripUpdate.StopTimeEvent) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_arrival() {
                return pb_1.Message.getField(this, 2);
            }
            get departure() {
                return pb_1.Message.getWrapperField(this, TripUpdate.StopTimeEvent, 3) as TripUpdate.StopTimeEvent;
            }
            set departure(value: TripUpdate.StopTimeEvent) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_departure() {
                return pb_1.Message.getField(this, 3);
            }
            get departure_occupancy_status() {
                return pb_1.Message.getFieldWithDefault(this, 7, VehiclePosition.OccupancyStatus.EMPTY) as VehiclePosition.OccupancyStatus;
            }
            set departure_occupancy_status(value: VehiclePosition.OccupancyStatus) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_departure_occupancy_status() {
                return pb_1.Message.getField(this, 7);
            }
            get schedule_relationship() {
                return pb_1.Message.getFieldWithDefault(this, 5, TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED) as TripUpdate.StopTimeUpdate.ScheduleRelationship;
            }
            set schedule_relationship(value: TripUpdate.StopTimeUpdate.ScheduleRelationship) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_schedule_relationship() {
                return pb_1.Message.getField(this, 5);
            }
            get stop_time_properties() {
                return pb_1.Message.getWrapperField(this, TripUpdate.StopTimeUpdate.StopTimeProperties, 6) as TripUpdate.StopTimeUpdate.StopTimeProperties;
            }
            set stop_time_properties(value: TripUpdate.StopTimeUpdate.StopTimeProperties) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_stop_time_properties() {
                return pb_1.Message.getField(this, 6);
            }
            static fromObject(data: {
                stop_sequence?: number;
                stop_id?: string;
                arrival?: ReturnType<typeof TripUpdate.StopTimeEvent.prototype.toObject>;
                departure?: ReturnType<typeof TripUpdate.StopTimeEvent.prototype.toObject>;
                departure_occupancy_status?: VehiclePosition.OccupancyStatus;
                schedule_relationship?: TripUpdate.StopTimeUpdate.ScheduleRelationship;
                stop_time_properties?: ReturnType<typeof TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.toObject>;
            }): StopTimeUpdate {
                const message = new StopTimeUpdate({});
                if (data.stop_sequence) {
                    message.stop_sequence = data.stop_sequence;
                }
                if (data.stop_id) {
                    message.stop_id = data.stop_id;
                }
                if (data.arrival) {
                    message.arrival = TripUpdate.StopTimeEvent.fromObject(data.arrival);
                }
                if (data.departure) {
                    message.departure = TripUpdate.StopTimeEvent.fromObject(data.departure);
                }
                if (data.departure_occupancy_status) {
                    message.departure_occupancy_status = data.departure_occupancy_status;
                }
                if ((data.schedule_relationship || data.schedule_relationship == 0)) {
                    message.schedule_relationship = data.schedule_relationship;
                }
                if (data.stop_time_properties) {
                    message.stop_time_properties = TripUpdate.StopTimeUpdate.StopTimeProperties.fromObject(data.stop_time_properties);
                }
                return message;
            }
            toObject() {
                const data: {
                    stop_sequence?: number;
                    stop_id?: string;
                    arrival?: ReturnType<typeof TripUpdate.StopTimeEvent.prototype.toObject>;
                    departure?: ReturnType<typeof TripUpdate.StopTimeEvent.prototype.toObject>;
                    departure_occupancy_status?: VehiclePosition.OccupancyStatus;
                    schedule_relationship?: TripUpdate.StopTimeUpdate.ScheduleRelationship;
                    stop_time_properties?: ReturnType<typeof TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.toObject>;
                } = {};
                if (this.stop_sequence) {
                    data.stop_sequence = this.stop_sequence;
                }
                if (this.stop_id) {
                    data.stop_id = this.stop_id;
                }
                if (this.arrival) {
                    data.arrival = this.arrival.toObject();
                }
                if (this.departure) {
                    data.departure = this.departure.toObject();
                }
                if (this.departure_occupancy_status) {
                    data.departure_occupancy_status = this.departure_occupancy_status;
                }
                if ((this.schedule_relationship || this.schedule_relationship == 0)) {
                    data.schedule_relationship = this.schedule_relationship;
                }
                if (this.stop_time_properties) {
                    data.stop_time_properties = this.stop_time_properties.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_stop_sequence)
                    writer.writeUint32(1, this.stop_sequence);
                if (this.has_stop_id && this.stop_id.length)
                    writer.writeString(4, this.stop_id);
                if (this.has_arrival)
                    writer.writeMessage(2, this.arrival, () => this.arrival.serialize(writer));
                if (this.has_departure)
                    writer.writeMessage(3, this.departure, () => this.departure.serialize(writer));
                if (this.has_departure_occupancy_status)
                    writer.writeEnum(7, this.departure_occupancy_status);
                if (this.has_schedule_relationship)
                    writer.writeEnum(5, this.schedule_relationship);
                if (this.has_stop_time_properties)
                    writer.writeMessage(6, this.stop_time_properties, () => this.stop_time_properties.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopTimeUpdate {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopTimeUpdate();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.stop_sequence = reader.readUint32();
                            break;
                        case 4:
                            message.stop_id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.arrival, () => message.arrival = TripUpdate.StopTimeEvent.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.departure, () => message.departure = TripUpdate.StopTimeEvent.deserialize(reader));
                            break;
                        case 7:
                            message.departure_occupancy_status = reader.readEnum();
                            break;
                        case 5:
                            message.schedule_relationship = reader.readEnum();
                            break;
                        case 6:
                            reader.readMessage(message.stop_time_properties, () => message.stop_time_properties = TripUpdate.StopTimeUpdate.StopTimeProperties.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StopTimeUpdate {
                return StopTimeUpdate.deserialize(bytes);
            }
        }
        export namespace StopTimeUpdate {
            export enum ScheduleRelationship {
                SCHEDULED = 0,
                SKIPPED = 1,
                NO_DATA = 2,
                UNSCHEDULED = 3
            }
            export class StopTimeProperties extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    assigned_stop_id?: string;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("assigned_stop_id" in data && data.assigned_stop_id) {
                            this.assigned_stop_id = data.assigned_stop_id;
                        }
                    }
                }
                get assigned_stop_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set assigned_stop_id(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_assigned_stop_id() {
                    return pb_1.Message.getField(this, 1);
                }
                static fromObject(data: {
                    assigned_stop_id?: string;
                }): StopTimeProperties {
                    const message = new StopTimeProperties({});
                    if (data.assigned_stop_id) {
                        message.assigned_stop_id = data.assigned_stop_id;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        assigned_stop_id?: string;
                    } = {};
                    if (this.assigned_stop_id) {
                        data.assigned_stop_id = this.assigned_stop_id;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_assigned_stop_id && this.assigned_stop_id.length)
                        writer.writeString(1, this.assigned_stop_id);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopTimeProperties {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopTimeProperties();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.assigned_stop_id = reader.readString();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): StopTimeProperties {
                    return StopTimeProperties.deserialize(bytes);
                }
            }
        }
        export class TripProperties extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                trip_id?: string;
                start_date?: string;
                start_time?: string;
                shape_id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("trip_id" in data && data.trip_id) {
                        this.trip_id = data.trip_id;
                    }
                    if ("start_date" in data && data.start_date) {
                        this.start_date = data.start_date;
                    }
                    if ("start_time" in data && data.start_time) {
                        this.start_time = data.start_time;
                    }
                    if ("shape_id" in data && data.shape_id) {
                        this.shape_id = data.shape_id;
                    }
                }
            }
            get trip_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set trip_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_trip_id() {
                return pb_1.Message.getField(this, 1);
            }
            get start_date() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set start_date(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_start_date() {
                return pb_1.Message.getField(this, 2);
            }
            get start_time() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set start_time(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_start_time() {
                return pb_1.Message.getField(this, 3);
            }
            get shape_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set shape_id(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_shape_id() {
                return pb_1.Message.getField(this, 4);
            }
            static fromObject(data: {
                trip_id?: string;
                start_date?: string;
                start_time?: string;
                shape_id?: string;
            }): TripProperties {
                const message = new TripProperties({});
                if (data.trip_id) {
                    message.trip_id = data.trip_id;
                }
                if (data.start_date) {
                    message.start_date = data.start_date;
                }
                if (data.start_time) {
                    message.start_time = data.start_time;
                }
                if (data.shape_id) {
                    message.shape_id = data.shape_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    trip_id?: string;
                    start_date?: string;
                    start_time?: string;
                    shape_id?: string;
                } = {};
                if (this.trip_id) {
                    data.trip_id = this.trip_id;
                }
                if (this.start_date) {
                    data.start_date = this.start_date;
                }
                if (this.start_time) {
                    data.start_time = this.start_time;
                }
                if (this.shape_id) {
                    data.shape_id = this.shape_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_trip_id && this.trip_id.length)
                    writer.writeString(1, this.trip_id);
                if (this.has_start_date && this.start_date.length)
                    writer.writeString(2, this.start_date);
                if (this.has_start_time && this.start_time.length)
                    writer.writeString(3, this.start_time);
                if (this.has_shape_id && this.shape_id.length)
                    writer.writeString(4, this.shape_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TripProperties {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TripProperties();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.trip_id = reader.readString();
                            break;
                        case 2:
                            message.start_date = reader.readString();
                            break;
                        case 3:
                            message.start_time = reader.readString();
                            break;
                        case 4:
                            message.shape_id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TripProperties {
                return TripProperties.deserialize(bytes);
            }
        }
    }
    export class VehiclePosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            trip?: TripDescriptor;
            vehicle?: VehicleDescriptor;
            position?: Position;
            current_stop_sequence?: number;
            stop_id?: string;
            current_status?: VehiclePosition.VehicleStopStatus;
            timestamp?: number;
            congestion_level?: VehiclePosition.CongestionLevel;
            occupancy_status?: VehiclePosition.OccupancyStatus;
            occupancy_percentage?: number;
            multi_carriage_details: VehiclePosition.CarriageDetails[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("trip" in data && data.trip) {
                    this.trip = data.trip;
                }
                if ("vehicle" in data && data.vehicle) {
                    this.vehicle = data.vehicle;
                }
                if ("position" in data && data.position) {
                    this.position = data.position;
                }
                if ("current_stop_sequence" in data && data.current_stop_sequence) {
                    this.current_stop_sequence = data.current_stop_sequence;
                }
                if ("stop_id" in data && data.stop_id) {
                    this.stop_id = data.stop_id;
                }
                if ("current_status" in data && data.current_status) {
                    this.current_status = data.current_status;
                }
                if ("timestamp" in data && data.timestamp) {
                    this.timestamp = data.timestamp;
                }
                if ("congestion_level" in data && data.congestion_level) {
                    this.congestion_level = data.congestion_level;
                }
                if ("occupancy_status" in data && data.occupancy_status) {
                    this.occupancy_status = data.occupancy_status;
                }
                if ("occupancy_percentage" in data && data.occupancy_percentage) {
                    this.occupancy_percentage = data.occupancy_percentage;
                }
                this.multi_carriage_details = data.multi_carriage_details;
            }
        }
        get trip() {
            return pb_1.Message.getWrapperField(this, TripDescriptor, 1) as TripDescriptor;
        }
        set trip(value: TripDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_trip() {
            return pb_1.Message.getField(this, 1);
        }
        get vehicle() {
            return pb_1.Message.getWrapperField(this, VehicleDescriptor, 8) as VehicleDescriptor;
        }
        set vehicle(value: VehicleDescriptor) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_vehicle() {
            return pb_1.Message.getField(this, 8);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 2) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 2);
        }
        get current_stop_sequence() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set current_stop_sequence(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_current_stop_sequence() {
            return pb_1.Message.getField(this, 3);
        }
        get stop_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set stop_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_stop_id() {
            return pb_1.Message.getField(this, 7);
        }
        get current_status() {
            return pb_1.Message.getFieldWithDefault(this, 4, VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO) as VehiclePosition.VehicleStopStatus;
        }
        set current_status(value: VehiclePosition.VehicleStopStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_current_status() {
            return pb_1.Message.getField(this, 4);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 5);
        }
        get congestion_level() {
            return pb_1.Message.getFieldWithDefault(this, 6, VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL) as VehiclePosition.CongestionLevel;
        }
        set congestion_level(value: VehiclePosition.CongestionLevel) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_congestion_level() {
            return pb_1.Message.getField(this, 6);
        }
        get occupancy_status() {
            return pb_1.Message.getFieldWithDefault(this, 9, VehiclePosition.OccupancyStatus.EMPTY) as VehiclePosition.OccupancyStatus;
        }
        set occupancy_status(value: VehiclePosition.OccupancyStatus) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_occupancy_status() {
            return pb_1.Message.getField(this, 9);
        }
        get occupancy_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set occupancy_percentage(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_occupancy_percentage() {
            return pb_1.Message.getField(this, 10);
        }
        get multi_carriage_details() {
            return pb_1.Message.getRepeatedWrapperField(this, VehiclePosition.CarriageDetails, 11) as VehiclePosition.CarriageDetails[];
        }
        set multi_carriage_details(value: VehiclePosition.CarriageDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        static fromObject(data: {
            trip?: ReturnType<typeof TripDescriptor.prototype.toObject>;
            vehicle?: ReturnType<typeof VehicleDescriptor.prototype.toObject>;
            position?: ReturnType<typeof Position.prototype.toObject>;
            current_stop_sequence?: number;
            stop_id?: string;
            current_status?: VehiclePosition.VehicleStopStatus;
            timestamp?: number;
            congestion_level?: VehiclePosition.CongestionLevel;
            occupancy_status?: VehiclePosition.OccupancyStatus;
            occupancy_percentage?: number;
            multi_carriage_details?: ReturnType<typeof VehiclePosition.CarriageDetails.prototype.toObject>[];
        }): VehiclePosition {
            const message = new VehiclePosition({
                multi_carriage_details: data.multi_carriage_details.map(item => VehiclePosition.CarriageDetails.fromObject(item))
            });
            if (data.trip) {
                message.trip = TripDescriptor.fromObject(data.trip);
            }
            if (data.vehicle) {
                message.vehicle = VehicleDescriptor.fromObject(data.vehicle);
            }
            if (data.position) {
                message.position = Position.fromObject(data.position);
            }
            if (data.current_stop_sequence) {
                message.current_stop_sequence = data.current_stop_sequence;
            }
            if (data.stop_id) {
                message.stop_id = data.stop_id;
            }
            if (data.current_status) {
                message.current_status = data.current_status;
            }
            if (data.timestamp) {
                message.timestamp = data.timestamp;
            }
            if (data.congestion_level) {
                message.congestion_level = data.congestion_level;
            }
            if (data.occupancy_status) {
                message.occupancy_status = data.occupancy_status;
            }
            if (data.occupancy_percentage) {
                message.occupancy_percentage = data.occupancy_percentage;
            }
            return message;
        }
        toObject() {
            const data: {
                trip?: ReturnType<typeof TripDescriptor.prototype.toObject>;
                vehicle?: ReturnType<typeof VehicleDescriptor.prototype.toObject>;
                position?: ReturnType<typeof Position.prototype.toObject>;
                current_stop_sequence?: number;
                stop_id?: string;
                current_status?: VehiclePosition.VehicleStopStatus;
                timestamp?: number;
                congestion_level?: VehiclePosition.CongestionLevel;
                occupancy_status?: VehiclePosition.OccupancyStatus;
                occupancy_percentage?: number;
                multi_carriage_details?: ReturnType<typeof VehiclePosition.CarriageDetails.prototype.toObject>[];
            } = {};
            if (this.trip) {
                data.trip = this.trip.toObject();
            }
            if (this.vehicle) {
                data.vehicle = this.vehicle.toObject();
            }
            if (this.position) {
                data.position = this.position.toObject();
            }
            if (this.current_stop_sequence) {
                data.current_stop_sequence = this.current_stop_sequence;
            }
            if (this.stop_id) {
                data.stop_id = this.stop_id;
            }
            if (this.current_status) {
                data.current_status = this.current_status;
            }
            if (this.timestamp) {
                data.timestamp = this.timestamp;
            }
            if (this.congestion_level) {
                data.congestion_level = this.congestion_level;
            }
            if (this.occupancy_status) {
                data.occupancy_status = this.occupancy_status;
            }
            if (this.occupancy_percentage) {
                data.occupancy_percentage = this.occupancy_percentage;
            }
            if (this.multi_carriage_details) {
                data.multi_carriage_details = this.multi_carriage_details.map((item: VehiclePosition.CarriageDetails) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_trip)
                writer.writeMessage(1, this.trip, () => this.trip.serialize(writer));
            if (this.has_vehicle)
                writer.writeMessage(8, this.vehicle, () => this.vehicle.serialize(writer));
            if (this.has_position)
                writer.writeMessage(2, this.position, () => this.position.serialize(writer));
            if (this.has_current_stop_sequence)
                writer.writeUint32(3, this.current_stop_sequence);
            if (this.has_stop_id && this.stop_id.length)
                writer.writeString(7, this.stop_id);
            if (this.has_current_status)
                writer.writeEnum(4, this.current_status);
            if (this.has_timestamp)
                writer.writeUint64(5, this.timestamp);
            if (this.has_congestion_level)
                writer.writeEnum(6, this.congestion_level);
            if (this.has_occupancy_status)
                writer.writeEnum(9, this.occupancy_status);
            if (this.has_occupancy_percentage)
                writer.writeUint32(10, this.occupancy_percentage);
            if (this.multi_carriage_details.length)
                writer.writeRepeatedMessage(11, this.multi_carriage_details, (item: VehiclePosition.CarriageDetails) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehiclePosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VehiclePosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.trip, () => message.trip = TripDescriptor.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.vehicle, () => message.vehicle = VehicleDescriptor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    case 3:
                        message.current_stop_sequence = reader.readUint32();
                        break;
                    case 7:
                        message.stop_id = reader.readString();
                        break;
                    case 4:
                        message.current_status = reader.readEnum();
                        break;
                    case 5:
                        message.timestamp = reader.readUint64();
                        break;
                    case 6:
                        message.congestion_level = reader.readEnum();
                        break;
                    case 9:
                        message.occupancy_status = reader.readEnum();
                        break;
                    case 10:
                        message.occupancy_percentage = reader.readUint32();
                        break;
                    case 11:
                        reader.readMessage(message.multi_carriage_details, () => pb_1.Message.addToRepeatedWrapperField(message, 11, VehiclePosition.CarriageDetails.deserialize(reader), VehiclePosition.CarriageDetails));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VehiclePosition {
            return VehiclePosition.deserialize(bytes);
        }
    }
    export namespace VehiclePosition {
        export enum VehicleStopStatus {
            INCOMING_AT = 0,
            STOPPED_AT = 1,
            IN_TRANSIT_TO = 2
        }
        export enum CongestionLevel {
            UNKNOWN_CONGESTION_LEVEL = 0,
            RUNNING_SMOOTHLY = 1,
            STOP_AND_GO = 2,
            CONGESTION = 3,
            SEVERE_CONGESTION = 4
        }
        export enum OccupancyStatus {
            EMPTY = 0,
            MANY_SEATS_AVAILABLE = 1,
            FEW_SEATS_AVAILABLE = 2,
            STANDING_ROOM_ONLY = 3,
            CRUSHED_STANDING_ROOM_ONLY = 4,
            FULL = 5,
            NOT_ACCEPTING_PASSENGERS = 6,
            NO_DATA_AVAILABLE = 7,
            NOT_BOARDABLE = 8
        }
        export class CarriageDetails extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                label?: string;
                occupancy_status?: VehiclePosition.OccupancyStatus;
                occupancy_percentage?: number;
                carriage_sequence?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id) {
                        this.id = data.id;
                    }
                    if ("label" in data && data.label) {
                        this.label = data.label;
                    }
                    if ("occupancy_status" in data && data.occupancy_status) {
                        this.occupancy_status = data.occupancy_status;
                    }
                    if ("occupancy_percentage" in data && data.occupancy_percentage) {
                        this.occupancy_percentage = data.occupancy_percentage;
                    }
                    if ("carriage_sequence" in data && data.carriage_sequence) {
                        this.carriage_sequence = data.carriage_sequence;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1);
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set label(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_label() {
                return pb_1.Message.getField(this, 2);
            }
            get occupancy_status() {
                return pb_1.Message.getFieldWithDefault(this, 3, VehiclePosition.OccupancyStatus.NO_DATA_AVAILABLE) as VehiclePosition.OccupancyStatus;
            }
            set occupancy_status(value: VehiclePosition.OccupancyStatus) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_occupancy_status() {
                return pb_1.Message.getField(this, 3);
            }
            get occupancy_percentage() {
                return pb_1.Message.getFieldWithDefault(this, 4, -1) as number;
            }
            set occupancy_percentage(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_occupancy_percentage() {
                return pb_1.Message.getField(this, 4);
            }
            get carriage_sequence() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set carriage_sequence(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_carriage_sequence() {
                return pb_1.Message.getField(this, 5);
            }
            static fromObject(data: {
                id?: string;
                label?: string;
                occupancy_status?: VehiclePosition.OccupancyStatus;
                occupancy_percentage?: number;
                carriage_sequence?: number;
            }): CarriageDetails {
                const message = new CarriageDetails({});
                if (data.id) {
                    message.id = data.id;
                }
                if (data.label) {
                    message.label = data.label;
                }
                if (data.occupancy_status) {
                    message.occupancy_status = data.occupancy_status;
                }
                if (data.occupancy_percentage) {
                    message.occupancy_percentage = data.occupancy_percentage;
                }
                if (data.carriage_sequence) {
                    message.carriage_sequence = data.carriage_sequence;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    label?: string;
                    occupancy_status?: VehiclePosition.OccupancyStatus;
                    occupancy_percentage?: number;
                    carriage_sequence?: number;
                } = {};
                if (this.id) {
                    data.id = this.id;
                }
                if (this.label) {
                    data.label = this.label;
                }
                if (this.occupancy_status) {
                    data.occupancy_status = this.occupancy_status;
                }
                if (this.occupancy_percentage) {
                    data.occupancy_percentage = this.occupancy_percentage;
                }
                if (this.carriage_sequence) {
                    data.carriage_sequence = this.carriage_sequence;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_label && this.label.length)
                    writer.writeString(2, this.label);
                if (this.has_occupancy_status)
                    writer.writeEnum(3, this.occupancy_status);
                if (this.has_occupancy_percentage)
                    writer.writeInt32(4, this.occupancy_percentage);
                if (this.has_carriage_sequence)
                    writer.writeUint32(5, this.carriage_sequence);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CarriageDetails {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CarriageDetails();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.label = reader.readString();
                            break;
                        case 3:
                            message.occupancy_status = reader.readEnum();
                            break;
                        case 4:
                            message.occupancy_percentage = reader.readInt32();
                            break;
                        case 5:
                            message.carriage_sequence = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CarriageDetails {
                return CarriageDetails.deserialize(bytes);
            }
        }
    }
    export class Alert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            active_period: TimeRange[];
            informed_entity: EntitySelector[];
            cause?: Alert.Cause;
            effect?: Alert.Effect;
            url?: TranslatedString;
            header_text?: TranslatedString;
            description_text?: TranslatedString;
            tts_header_text?: TranslatedString;
            tts_description_text?: TranslatedString;
            severity_level?: Alert.SeverityLevel;
            image?: TranslatedImage;
            image_alternative_text?: TranslatedString;
            cause_detail?: TranslatedString;
            effect_detail?: TranslatedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.active_period = data.active_period;
                this.informed_entity = data.informed_entity;
                if ("cause" in data && data.cause) {
                    this.cause = data.cause;
                }
                if ("effect" in data && data.effect) {
                    this.effect = data.effect;
                }
                if ("url" in data && data.url) {
                    this.url = data.url;
                }
                if ("header_text" in data && data.header_text) {
                    this.header_text = data.header_text;
                }
                if ("description_text" in data && data.description_text) {
                    this.description_text = data.description_text;
                }
                if ("tts_header_text" in data && data.tts_header_text) {
                    this.tts_header_text = data.tts_header_text;
                }
                if ("tts_description_text" in data && data.tts_description_text) {
                    this.tts_description_text = data.tts_description_text;
                }
                if ("severity_level" in data && data.severity_level) {
                    this.severity_level = data.severity_level;
                }
                if ("image" in data && data.image) {
                    this.image = data.image;
                }
                if ("image_alternative_text" in data && data.image_alternative_text) {
                    this.image_alternative_text = data.image_alternative_text;
                }
                if ("cause_detail" in data && data.cause_detail) {
                    this.cause_detail = data.cause_detail;
                }
                if ("effect_detail" in data && data.effect_detail) {
                    this.effect_detail = data.effect_detail;
                }
            }
        }
        get active_period() {
            return pb_1.Message.getRepeatedWrapperField(this, TimeRange, 1) as TimeRange[];
        }
        set active_period(value: TimeRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get informed_entity() {
            return pb_1.Message.getRepeatedWrapperField(this, EntitySelector, 5) as EntitySelector[];
        }
        set informed_entity(value: EntitySelector[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get cause() {
            return pb_1.Message.getFieldWithDefault(this, 6, Alert.Cause.UNKNOWN_CAUSE) as Alert.Cause;
        }
        set cause(value: Alert.Cause) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_cause() {
            return pb_1.Message.getField(this, 6);
        }
        get effect() {
            return pb_1.Message.getFieldWithDefault(this, 7, Alert.Effect.UNKNOWN_EFFECT) as Alert.Effect;
        }
        set effect(value: Alert.Effect) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_effect() {
            return pb_1.Message.getField(this, 7);
        }
        get url() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 8) as TranslatedString;
        }
        set url(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_url() {
            return pb_1.Message.getField(this, 8);
        }
        get header_text() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 10) as TranslatedString;
        }
        set header_text(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_header_text() {
            return pb_1.Message.getField(this, 10);
        }
        get description_text() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 11) as TranslatedString;
        }
        set description_text(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_description_text() {
            return pb_1.Message.getField(this, 11);
        }
        get tts_header_text() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 12) as TranslatedString;
        }
        set tts_header_text(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_tts_header_text() {
            return pb_1.Message.getField(this, 12);
        }
        get tts_description_text() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 13) as TranslatedString;
        }
        set tts_description_text(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_tts_description_text() {
            return pb_1.Message.getField(this, 13);
        }
        get severity_level() {
            return pb_1.Message.getFieldWithDefault(this, 14, Alert.SeverityLevel.UNKNOWN_SEVERITY) as Alert.SeverityLevel;
        }
        set severity_level(value: Alert.SeverityLevel) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_severity_level() {
            return pb_1.Message.getField(this, 14);
        }
        get image() {
            return pb_1.Message.getWrapperField(this, TranslatedImage, 15) as TranslatedImage;
        }
        set image(value: TranslatedImage) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 15);
        }
        get image_alternative_text() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 16) as TranslatedString;
        }
        set image_alternative_text(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_image_alternative_text() {
            return pb_1.Message.getField(this, 16);
        }
        get cause_detail() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 17) as TranslatedString;
        }
        set cause_detail(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_cause_detail() {
            return pb_1.Message.getField(this, 17);
        }
        get effect_detail() {
            return pb_1.Message.getWrapperField(this, TranslatedString, 18) as TranslatedString;
        }
        set effect_detail(value: TranslatedString) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_effect_detail() {
            return pb_1.Message.getField(this, 18);
        }
        static fromObject(data: {
            active_period?: ReturnType<typeof TimeRange.prototype.toObject>[];
            informed_entity?: ReturnType<typeof EntitySelector.prototype.toObject>[];
            cause?: Alert.Cause;
            effect?: Alert.Effect;
            url?: ReturnType<typeof TranslatedString.prototype.toObject>;
            header_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
            description_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
            tts_header_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
            tts_description_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
            severity_level?: Alert.SeverityLevel;
            image?: ReturnType<typeof TranslatedImage.prototype.toObject>;
            image_alternative_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
            cause_detail?: ReturnType<typeof TranslatedString.prototype.toObject>;
            effect_detail?: ReturnType<typeof TranslatedString.prototype.toObject>;
        }): Alert {
            const message = new Alert({
                active_period: data.active_period.map(item => TimeRange.fromObject(item)),
                informed_entity: data.informed_entity.map(item => EntitySelector.fromObject(item))
            });
            if (data.cause) {
                message.cause = data.cause;
            }
            if (data.effect) {
                message.effect = data.effect;
            }
            if (data.url) {
                message.url = TranslatedString.fromObject(data.url);
            }
            if (data.header_text) {
                message.header_text = TranslatedString.fromObject(data.header_text);
            }
            if (data.description_text) {
                message.description_text = TranslatedString.fromObject(data.description_text);
            }
            if (data.tts_header_text) {
                message.tts_header_text = TranslatedString.fromObject(data.tts_header_text);
            }
            if (data.tts_description_text) {
                message.tts_description_text = TranslatedString.fromObject(data.tts_description_text);
            }
            if (data.severity_level) {
                message.severity_level = data.severity_level;
            }
            if (data.image) {
                message.image = TranslatedImage.fromObject(data.image);
            }
            if (data.image_alternative_text) {
                message.image_alternative_text = TranslatedString.fromObject(data.image_alternative_text);
            }
            if (data.cause_detail) {
                message.cause_detail = TranslatedString.fromObject(data.cause_detail);
            }
            if (data.effect_detail) {
                message.effect_detail = TranslatedString.fromObject(data.effect_detail);
            }
            return message;
        }
        toObject() {
            const data: {
                active_period?: ReturnType<typeof TimeRange.prototype.toObject>[];
                informed_entity?: ReturnType<typeof EntitySelector.prototype.toObject>[];
                cause?: Alert.Cause;
                effect?: Alert.Effect;
                url?: ReturnType<typeof TranslatedString.prototype.toObject>;
                header_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
                description_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
                tts_header_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
                tts_description_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
                severity_level?: Alert.SeverityLevel;
                image?: ReturnType<typeof TranslatedImage.prototype.toObject>;
                image_alternative_text?: ReturnType<typeof TranslatedString.prototype.toObject>;
                cause_detail?: ReturnType<typeof TranslatedString.prototype.toObject>;
                effect_detail?: ReturnType<typeof TranslatedString.prototype.toObject>;
            } = {};
            if (this.active_period) {
                data.active_period = this.active_period.map((item: TimeRange) => item.toObject());
            }
            if (this.informed_entity) {
                data.informed_entity = this.informed_entity.map((item: EntitySelector) => item.toObject());
            }
            if (this.cause) {
                data.cause = this.cause;
            }
            if (this.effect) {
                data.effect = this.effect;
            }
            if (this.url) {
                data.url = this.url.toObject();
            }
            if (this.header_text) {
                data.header_text = this.header_text.toObject();
            }
            if (this.description_text) {
                data.description_text = this.description_text.toObject();
            }
            if (this.tts_header_text) {
                data.tts_header_text = this.tts_header_text.toObject();
            }
            if (this.tts_description_text) {
                data.tts_description_text = this.tts_description_text.toObject();
            }
            if (this.severity_level) {
                data.severity_level = this.severity_level;
            }
            if (this.image) {
                data.image = this.image.toObject();
            }
            if (this.image_alternative_text) {
                data.image_alternative_text = this.image_alternative_text.toObject();
            }
            if (this.cause_detail) {
                data.cause_detail = this.cause_detail.toObject();
            }
            if (this.effect_detail) {
                data.effect_detail = this.effect_detail.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.active_period.length)
                writer.writeRepeatedMessage(1, this.active_period, (item: TimeRange) => item.serialize(writer));
            if (this.informed_entity.length)
                writer.writeRepeatedMessage(5, this.informed_entity, (item: EntitySelector) => item.serialize(writer));
            if (this.has_cause)
                writer.writeEnum(6, this.cause);
            if (this.has_effect)
                writer.writeEnum(7, this.effect);
            if (this.has_url)
                writer.writeMessage(8, this.url, () => this.url.serialize(writer));
            if (this.has_header_text)
                writer.writeMessage(10, this.header_text, () => this.header_text.serialize(writer));
            if (this.has_description_text)
                writer.writeMessage(11, this.description_text, () => this.description_text.serialize(writer));
            if (this.has_tts_header_text)
                writer.writeMessage(12, this.tts_header_text, () => this.tts_header_text.serialize(writer));
            if (this.has_tts_description_text)
                writer.writeMessage(13, this.tts_description_text, () => this.tts_description_text.serialize(writer));
            if (this.has_severity_level)
                writer.writeEnum(14, this.severity_level);
            if (this.has_image)
                writer.writeMessage(15, this.image, () => this.image.serialize(writer));
            if (this.has_image_alternative_text)
                writer.writeMessage(16, this.image_alternative_text, () => this.image_alternative_text.serialize(writer));
            if (this.has_cause_detail)
                writer.writeMessage(17, this.cause_detail, () => this.cause_detail.serialize(writer));
            if (this.has_effect_detail)
                writer.writeMessage(18, this.effect_detail, () => this.effect_detail.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Alert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Alert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.active_period, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TimeRange.deserialize(reader), TimeRange));
                        break;
                    case 5:
                        reader.readMessage(message.informed_entity, () => pb_1.Message.addToRepeatedWrapperField(message, 5, EntitySelector.deserialize(reader), EntitySelector));
                        break;
                    case 6:
                        message.cause = reader.readEnum();
                        break;
                    case 7:
                        message.effect = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.url, () => message.url = TranslatedString.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.header_text, () => message.header_text = TranslatedString.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.description_text, () => message.description_text = TranslatedString.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.tts_header_text, () => message.tts_header_text = TranslatedString.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.tts_description_text, () => message.tts_description_text = TranslatedString.deserialize(reader));
                        break;
                    case 14:
                        message.severity_level = reader.readEnum();
                        break;
                    case 15:
                        reader.readMessage(message.image, () => message.image = TranslatedImage.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.image_alternative_text, () => message.image_alternative_text = TranslatedString.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.cause_detail, () => message.cause_detail = TranslatedString.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.effect_detail, () => message.effect_detail = TranslatedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Alert {
            return Alert.deserialize(bytes);
        }
    }
    export namespace Alert {
        export enum Cause {
            UNKNOWN_CAUSE = 1,
            OTHER_CAUSE = 2,
            TECHNICAL_PROBLEM = 3,
            STRIKE = 4,
            DEMONSTRATION = 5,
            ACCIDENT = 6,
            HOLIDAY = 7,
            WEATHER = 8,
            MAINTENANCE = 9,
            CONSTRUCTION = 10,
            POLICE_ACTIVITY = 11,
            MEDICAL_EMERGENCY = 12
        }
        export enum Effect {
            NO_SERVICE = 1,
            REDUCED_SERVICE = 2,
            SIGNIFICANT_DELAYS = 3,
            DETOUR = 4,
            ADDITIONAL_SERVICE = 5,
            MODIFIED_SERVICE = 6,
            OTHER_EFFECT = 7,
            UNKNOWN_EFFECT = 8,
            STOP_MOVED = 9,
            NO_EFFECT = 10,
            ACCESSIBILITY_ISSUE = 11
        }
        export enum SeverityLevel {
            UNKNOWN_SEVERITY = 1,
            INFO = 2,
            WARNING = 3,
            SEVERE = 4
        }
    }
    export class TimeRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: number;
            end?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start) {
                    this.start = data.start;
                }
                if ("end" in data && data.end) {
                    this.end = data.end;
                }
            }
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_start() {
            return pb_1.Message.getField(this, 1);
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_end() {
            return pb_1.Message.getField(this, 2);
        }
        static fromObject(data: {
            start?: number;
            end?: number;
        }): TimeRange {
            const message = new TimeRange({});
            if (data.start) {
                message.start = data.start;
            }
            if (data.end) {
                message.end = data.end;
            }
            return message;
        }
        toObject() {
            const data: {
                start?: number;
                end?: number;
            } = {};
            if (this.start) {
                data.start = this.start;
            }
            if (this.end) {
                data.end = this.end;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start)
                writer.writeUint64(1, this.start);
            if (this.has_end)
                writer.writeUint64(2, this.end);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start = reader.readUint64();
                        break;
                    case 2:
                        message.end = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeRange {
            return TimeRange.deserialize(bytes);
        }
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            latitude: number;
            longitude: number;
            bearing?: number;
            odometer?: number;
            speed?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.latitude = data.latitude;
                this.longitude = data.longitude;
                if ("bearing" in data && data.bearing) {
                    this.bearing = data.bearing;
                }
                if ("odometer" in data && data.odometer) {
                    this.odometer = data.odometer;
                }
                if ("speed" in data && data.speed) {
                    this.speed = data.speed;
                }
            }
        }
        get latitude() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set latitude(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_latitude() {
            return pb_1.Message.getField(this, 1);
        }
        get longitude() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set longitude(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_longitude() {
            return pb_1.Message.getField(this, 2);
        }
        get bearing() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set bearing(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_bearing() {
            return pb_1.Message.getField(this, 3);
        }
        get odometer() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set odometer(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_odometer() {
            return pb_1.Message.getField(this, 4);
        }
        get speed() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set speed(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_speed() {
            return pb_1.Message.getField(this, 5);
        }
        static fromObject(data: {
            latitude?: number;
            longitude?: number;
            bearing?: number;
            odometer?: number;
            speed?: number;
        }): Position {
            const message = new Position({
                latitude: data.latitude,
                longitude: data.longitude
            });
            if (data.bearing) {
                message.bearing = data.bearing;
            }
            if (data.odometer) {
                message.odometer = data.odometer;
            }
            if (data.speed) {
                message.speed = data.speed;
            }
            return message;
        }
        toObject() {
            const data: {
                latitude?: number;
                longitude?: number;
                bearing?: number;
                odometer?: number;
                speed?: number;
            } = {};
            if (this.latitude) {
                data.latitude = this.latitude;
            }
            if (this.longitude) {
                data.longitude = this.longitude;
            }
            if (this.bearing) {
                data.bearing = this.bearing;
            }
            if (this.odometer) {
                data.odometer = this.odometer;
            }
            if (this.speed) {
                data.speed = this.speed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_latitude)
                writer.writeFloat(1, this.latitude);
            if (this.has_longitude)
                writer.writeFloat(2, this.longitude);
            if (this.has_bearing)
                writer.writeFloat(3, this.bearing);
            if (this.has_odometer)
                writer.writeDouble(4, this.odometer);
            if (this.has_speed)
                writer.writeFloat(5, this.speed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.latitude = reader.readFloat();
                        break;
                    case 2:
                        message.longitude = reader.readFloat();
                        break;
                    case 3:
                        message.bearing = reader.readFloat();
                        break;
                    case 4:
                        message.odometer = reader.readDouble();
                        break;
                    case 5:
                        message.speed = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class TripDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            trip_id?: string;
            route_id?: string;
            direction_id?: number;
            start_time?: string;
            start_date?: string;
            schedule_relationship?: TripDescriptor.ScheduleRelationship;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("trip_id" in data && data.trip_id) {
                    this.trip_id = data.trip_id;
                }
                if ("route_id" in data && data.route_id) {
                    this.route_id = data.route_id;
                }
                if ("direction_id" in data && (data.direction_id || data.direction_id == 0)) {
                    this.direction_id = data.direction_id;
                }
                if ("start_time" in data && data.start_time) {
                    this.start_time = data.start_time;
                }
                if ("start_date" in data && data.start_date) {
                    this.start_date = data.start_date;
                }
                if ("schedule_relationship" in data && (data.schedule_relationship || data.schedule_relationship == 0)) {
                    this.schedule_relationship = data.schedule_relationship;
                }
            }
        }
        get trip_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set trip_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_trip_id() {
            return pb_1.Message.getField(this, 1);
        }
        get route_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set route_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_route_id() {
            return pb_1.Message.getField(this, 5);
        }
        get direction_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set direction_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_direction_id() {
            return pb_1.Message.getField(this, 6);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 2);
        }
        get start_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set start_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_start_date() {
            return pb_1.Message.getField(this, 3);
        }
        get schedule_relationship() {
            return pb_1.Message.getFieldWithDefault(this, 4, TripDescriptor.ScheduleRelationship.SCHEDULED) as TripDescriptor.ScheduleRelationship;
        }
        set schedule_relationship(value: TripDescriptor.ScheduleRelationship) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_schedule_relationship() {
            return pb_1.Message.getField(this, 4);
        }
        static fromObject(data: {
            trip_id?: string;
            route_id?: string;
            direction_id?: number;
            start_time?: string;
            start_date?: string;
            schedule_relationship?: TripDescriptor.ScheduleRelationship;
        }): TripDescriptor {
            const message = new TripDescriptor({});
            if (data.trip_id) {
                message.trip_id = data.trip_id;
            }
            if (data.route_id) {
                message.route_id = data.route_id;
            }
            if ((data.direction_id || data.direction_id == 0)) {
                message.direction_id = data.direction_id;
            }
            if (data.start_time) {
                message.start_time = data.start_time;
            }
            if (data.start_date) {
                message.start_date = data.start_date;
            }
            if ((data.schedule_relationship || data.schedule_relationship == 0)) {
                message.schedule_relationship = data.schedule_relationship;
            }
            return message;
        }
        toObject() {
            const data: {
                trip_id?: string;
                route_id?: string;
                direction_id?: number;
                start_time?: string;
                start_date?: string;
                schedule_relationship?: TripDescriptor.ScheduleRelationship;
            } = {};
            if (this.trip_id) {
                data.trip_id = this.trip_id;
            }
            if (this.route_id) {
                data.route_id = this.route_id;
            }
            if ((this.direction_id || this.direction_id == 0)) {
                data.direction_id = this.direction_id;
            }
            if (this.start_time) {
                data.start_time = this.start_time;
            }
            if (this.start_date) {
                data.start_date = this.start_date;
            }
            if ((this.schedule_relationship || this.schedule_relationship == 0)) {
                data.schedule_relationship = this.schedule_relationship;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_trip_id && this.trip_id.length)
                writer.writeString(1, this.trip_id);
            if (this.has_route_id && this.route_id.length)
                writer.writeString(5, this.route_id);
            if (this.has_direction_id)
                writer.writeUint32(6, this.direction_id);
            if (this.has_start_time && this.start_time.length)
                writer.writeString(2, this.start_time);
            if (this.has_start_date && this.start_date.length)
                writer.writeString(3, this.start_date);
            if (this.has_schedule_relationship)
                writer.writeEnum(4, this.schedule_relationship);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TripDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TripDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.trip_id = reader.readString();
                        break;
                    case 5:
                        message.route_id = reader.readString();
                        break;
                    case 6:
                        message.direction_id = reader.readUint32();
                        break;
                    case 2:
                        message.start_time = reader.readString();
                        break;
                    case 3:
                        message.start_date = reader.readString();
                        break;
                    case 4:
                        message.schedule_relationship = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TripDescriptor {
            return TripDescriptor.deserialize(bytes);
        }
    }
    export namespace TripDescriptor {
        export enum ScheduleRelationship {
            SCHEDULED = 0,
            ADDED = 1,
            UNSCHEDULED = 2,
            CANCELED = 3,
            /** @deprecated*/
            REPLACEMENT = 5,
            DUPLICATED = 6,
            DELETED = 7
        }
    }
    export class VehicleDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            label?: string;
            license_plate?: string;
            wheelchair_accessible?: VehicleDescriptor.WheelchairAccessible;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id) {
                    this.id = data.id;
                }
                if ("label" in data && data.label) {
                    this.label = data.label;
                }
                if ("license_plate" in data && data.license_plate) {
                    this.license_plate = data.license_plate;
                }
                if ("wheelchair_accessible" in data && data.wheelchair_accessible) {
                    this.wheelchair_accessible = data.wheelchair_accessible;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_label() {
            return pb_1.Message.getField(this, 2);
        }
        get license_plate() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set license_plate(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_license_plate() {
            return pb_1.Message.getField(this, 3);
        }
        get wheelchair_accessible() {
            return pb_1.Message.getFieldWithDefault(this, 4, VehicleDescriptor.WheelchairAccessible.NO_VALUE) as VehicleDescriptor.WheelchairAccessible;
        }
        set wheelchair_accessible(value: VehicleDescriptor.WheelchairAccessible) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_wheelchair_accessible() {
            return pb_1.Message.getField(this, 4);
        }
        static fromObject(data: {
            id?: string;
            label?: string;
            license_plate?: string;
            wheelchair_accessible?: VehicleDescriptor.WheelchairAccessible;
        }): VehicleDescriptor {
            const message = new VehicleDescriptor({});
            if (data.id) {
                message.id = data.id;
            }
            if (data.label) {
                message.label = data.label;
            }
            if (data.license_plate) {
                message.license_plate = data.license_plate;
            }
            if (data.wheelchair_accessible) {
                message.wheelchair_accessible = data.wheelchair_accessible;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                label?: string;
                license_plate?: string;
                wheelchair_accessible?: VehicleDescriptor.WheelchairAccessible;
            } = {};
            if (this.id) {
                data.id = this.id;
            }
            if (this.label) {
                data.label = this.label;
            }
            if (this.license_plate) {
                data.license_plate = this.license_plate;
            }
            if (this.wheelchair_accessible) {
                data.wheelchair_accessible = this.wheelchair_accessible;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id && this.id.length)
                writer.writeString(1, this.id);
            if (this.has_label && this.label.length)
                writer.writeString(2, this.label);
            if (this.has_license_plate && this.license_plate.length)
                writer.writeString(3, this.license_plate);
            if (this.has_wheelchair_accessible)
                writer.writeEnum(4, this.wheelchair_accessible);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VehicleDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.label = reader.readString();
                        break;
                    case 3:
                        message.license_plate = reader.readString();
                        break;
                    case 4:
                        message.wheelchair_accessible = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VehicleDescriptor {
            return VehicleDescriptor.deserialize(bytes);
        }
    }
    export namespace VehicleDescriptor {
        export enum WheelchairAccessible {
            NO_VALUE = 0,
            UNKNOWN = 1,
            WHEELCHAIR_ACCESSIBLE = 2,
            WHEELCHAIR_INACCESSIBLE = 3
        }
    }
    export class EntitySelector extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            agency_id?: string;
            route_id?: string;
            route_type?: number;
            trip?: TripDescriptor;
            stop_id?: string;
            direction_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("agency_id" in data && data.agency_id) {
                    this.agency_id = data.agency_id;
                }
                if ("route_id" in data && data.route_id) {
                    this.route_id = data.route_id;
                }
                if ("route_type" in data && data.route_type) {
                    this.route_type = data.route_type;
                }
                if ("trip" in data && data.trip) {
                    this.trip = data.trip;
                }
                if ("stop_id" in data && data.stop_id) {
                    this.stop_id = data.stop_id;
                }
                if ("direction_id" in data && (data.direction_id || data.direction_id == 0)) {
                    this.direction_id = data.direction_id;
                }
            }
        }
        get agency_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set agency_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_agency_id() {
            return pb_1.Message.getField(this, 1);
        }
        get route_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set route_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_route_id() {
            return pb_1.Message.getField(this, 2);
        }
        get route_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set route_type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_route_type() {
            return pb_1.Message.getField(this, 3);
        }
        get trip() {
            return pb_1.Message.getWrapperField(this, TripDescriptor, 4) as TripDescriptor;
        }
        set trip(value: TripDescriptor) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_trip() {
            return pb_1.Message.getField(this, 4);
        }
        get stop_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set stop_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_stop_id() {
            return pb_1.Message.getField(this, 5);
        }
        get direction_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set direction_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_direction_id() {
            return pb_1.Message.getField(this, 6);
        }
        static fromObject(data: {
            agency_id?: string;
            route_id?: string;
            route_type?: number;
            trip?: ReturnType<typeof TripDescriptor.prototype.toObject>;
            stop_id?: string;
            direction_id?: number;
        }): EntitySelector {
            const message = new EntitySelector({});
            if (data.agency_id) {
                message.agency_id = data.agency_id;
            }
            if (data.route_id) {
                message.route_id = data.route_id;
            }
            if (data.route_type) {
                message.route_type = data.route_type;
            }
            if (data.trip) {
                message.trip = TripDescriptor.fromObject(data.trip);
            }
            if (data.stop_id) {
                message.stop_id = data.stop_id;
            }
            if ((data.direction_id || data.direction_id == 0)) {
                message.direction_id = data.direction_id;
            }
            return message;
        }
        toObject() {
            const data: {
                agency_id?: string;
                route_id?: string;
                route_type?: number;
                trip?: ReturnType<typeof TripDescriptor.prototype.toObject>;
                stop_id?: string;
                direction_id?: number;
            } = {};
            if (this.agency_id) {
                data.agency_id = this.agency_id;
            }
            if (this.route_id) {
                data.route_id = this.route_id;
            }
            if (this.route_type) {
                data.route_type = this.route_type;
            }
            if (this.trip) {
                data.trip = this.trip.toObject();
            }
            if (this.stop_id) {
                data.stop_id = this.stop_id;
            }
            if ((this.direction_id || this.direction_id == 0)) {
                data.direction_id = this.direction_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_agency_id && this.agency_id.length)
                writer.writeString(1, this.agency_id);
            if (this.has_route_id && this.route_id.length)
                writer.writeString(2, this.route_id);
            if (this.has_route_type)
                writer.writeInt32(3, this.route_type);
            if (this.has_trip)
                writer.writeMessage(4, this.trip, () => this.trip.serialize(writer));
            if (this.has_stop_id && this.stop_id.length)
                writer.writeString(5, this.stop_id);
            if (this.has_direction_id)
                writer.writeUint32(6, this.direction_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntitySelector {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntitySelector();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.agency_id = reader.readString();
                        break;
                    case 2:
                        message.route_id = reader.readString();
                        break;
                    case 3:
                        message.route_type = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.trip, () => message.trip = TripDescriptor.deserialize(reader));
                        break;
                    case 5:
                        message.stop_id = reader.readString();
                        break;
                    case 6:
                        message.direction_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntitySelector {
            return EntitySelector.deserialize(bytes);
        }
    }
    export class TranslatedString extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            translation: TranslatedString.Translation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.translation = data.translation;
            }
        }
        get translation() {
            return pb_1.Message.getRepeatedWrapperField(this, TranslatedString.Translation, 1) as TranslatedString.Translation[];
        }
        set translation(value: TranslatedString.Translation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            translation?: ReturnType<typeof TranslatedString.Translation.prototype.toObject>[];
        }): TranslatedString {
            const message = new TranslatedString({
                translation: data.translation.map(item => TranslatedString.Translation.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                translation?: ReturnType<typeof TranslatedString.Translation.prototype.toObject>[];
            } = {};
            if (this.translation) {
                data.translation = this.translation.map((item: TranslatedString.Translation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.translation.length)
                writer.writeRepeatedMessage(1, this.translation, (item: TranslatedString.Translation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslatedString {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslatedString();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.translation, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TranslatedString.Translation.deserialize(reader), TranslatedString.Translation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslatedString {
            return TranslatedString.deserialize(bytes);
        }
    }
    export namespace TranslatedString {
        export class Translation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                text: string;
                language?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.text = data.text;
                    if ("language" in data && data.language) {
                        this.language = data.language;
                    }
                }
            }
            get text() {
                return pb_1.Message.getField(this, 1) as string;
            }
            set text(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_text() {
                return pb_1.Message.getField(this, 1);
            }
            get language() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set language(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_language() {
                return pb_1.Message.getField(this, 2);
            }
            static fromObject(data: {
                text?: string;
                language?: string;
            }): Translation {
                const message = new Translation({
                    text: data.text
                });
                if (data.language) {
                    message.language = data.language;
                }
                return message;
            }
            toObject() {
                const data: {
                    text?: string;
                    language?: string;
                } = {};
                if (this.text) {
                    data.text = this.text;
                }
                if (this.language) {
                    data.language = this.language;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_text && this.text.length)
                    writer.writeString(1, this.text);
                if (this.has_language && this.language.length)
                    writer.writeString(2, this.language);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Translation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Translation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.text = reader.readString();
                            break;
                        case 2:
                            message.language = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Translation {
                return Translation.deserialize(bytes);
            }
        }
    }
    export class TranslatedImage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            localized_image: TranslatedImage.LocalizedImage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.localized_image = data.localized_image;
            }
        }
        get localized_image() {
            return pb_1.Message.getRepeatedWrapperField(this, TranslatedImage.LocalizedImage, 1) as TranslatedImage.LocalizedImage[];
        }
        set localized_image(value: TranslatedImage.LocalizedImage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            localized_image?: ReturnType<typeof TranslatedImage.LocalizedImage.prototype.toObject>[];
        }): TranslatedImage {
            const message = new TranslatedImage({
                localized_image: data.localized_image.map(item => TranslatedImage.LocalizedImage.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                localized_image?: ReturnType<typeof TranslatedImage.LocalizedImage.prototype.toObject>[];
            } = {};
            if (this.localized_image) {
                data.localized_image = this.localized_image.map((item: TranslatedImage.LocalizedImage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.localized_image.length)
                writer.writeRepeatedMessage(1, this.localized_image, (item: TranslatedImage.LocalizedImage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TranslatedImage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TranslatedImage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.localized_image, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TranslatedImage.LocalizedImage.deserialize(reader), TranslatedImage.LocalizedImage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TranslatedImage {
            return TranslatedImage.deserialize(bytes);
        }
    }
    export namespace TranslatedImage {
        export class LocalizedImage extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                url: string;
                media_type: string;
                language?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.url = data.url;
                    this.media_type = data.media_type;
                    if ("language" in data && data.language) {
                        this.language = data.language;
                    }
                }
            }
            get url() {
                return pb_1.Message.getField(this, 1) as string;
            }
            set url(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_url() {
                return pb_1.Message.getField(this, 1);
            }
            get media_type() {
                return pb_1.Message.getField(this, 2) as string;
            }
            set media_type(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_media_type() {
                return pb_1.Message.getField(this, 2);
            }
            get language() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set language(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_language() {
                return pb_1.Message.getField(this, 3);
            }
            static fromObject(data: {
                url?: string;
                media_type?: string;
                language?: string;
            }): LocalizedImage {
                const message = new LocalizedImage({
                    url: data.url,
                    media_type: data.media_type
                });
                if (data.language) {
                    message.language = data.language;
                }
                return message;
            }
            toObject() {
                const data: {
                    url?: string;
                    media_type?: string;
                    language?: string;
                } = {};
                if (this.url) {
                    data.url = this.url;
                }
                if (this.media_type) {
                    data.media_type = this.media_type;
                }
                if (this.language) {
                    data.language = this.language;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_url && this.url.length)
                    writer.writeString(1, this.url);
                if (this.has_media_type && this.media_type.length)
                    writer.writeString(2, this.media_type);
                if (this.has_language && this.language.length)
                    writer.writeString(3, this.language);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalizedImage {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalizedImage();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.url = reader.readString();
                            break;
                        case 2:
                            message.media_type = reader.readString();
                            break;
                        case 3:
                            message.language = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LocalizedImage {
                return LocalizedImage.deserialize(bytes);
            }
        }
    }
    export class Shape extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shape_id?: string;
            encoded_polyline?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shape_id" in data && data.shape_id) {
                    this.shape_id = data.shape_id;
                }
                if ("encoded_polyline" in data && data.encoded_polyline) {
                    this.encoded_polyline = data.encoded_polyline;
                }
            }
        }
        get shape_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set shape_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_shape_id() {
            return pb_1.Message.getField(this, 1);
        }
        get encoded_polyline() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set encoded_polyline(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_encoded_polyline() {
            return pb_1.Message.getField(this, 2);
        }
        static fromObject(data: {
            shape_id?: string;
            encoded_polyline?: string;
        }): Shape {
            const message = new Shape({});
            if (data.shape_id) {
                message.shape_id = data.shape_id;
            }
            if (data.encoded_polyline) {
                message.encoded_polyline = data.encoded_polyline;
            }
            return message;
        }
        toObject() {
            const data: {
                shape_id?: string;
                encoded_polyline?: string;
            } = {};
            if (this.shape_id) {
                data.shape_id = this.shape_id;
            }
            if (this.encoded_polyline) {
                data.encoded_polyline = this.encoded_polyline;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_shape_id && this.shape_id.length)
                writer.writeString(1, this.shape_id);
            if (this.has_encoded_polyline && this.encoded_polyline.length)
                writer.writeString(2, this.encoded_polyline);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Shape {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Shape();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shape_id = reader.readString();
                        break;
                    case 2:
                        message.encoded_polyline = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Shape {
            return Shape.deserialize(bytes);
        }
    }
}
